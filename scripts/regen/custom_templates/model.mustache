{{>licenseInfo}}
{{#models}}{{#model}}defmodule DocuSign.Model.{{classname}} do
  @moduledoc """
  {{&description}}
  """

  defstruct [{{#vars}}
    {{#atom}}{{&baseName}}{{/atom}}{{^-last}},{{/-last}}{{/vars}}
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
{{#vars}}          :{{&baseName}} => {{{datatype}}}{{#isNullable}} | nil{{/isNullable}}{{^isNullable}}{{^required}} | nil{{/required}}{{/isNullable}}{{^-last}},{{/-last}}
{{/vars}}        }

{{#hasComplexVars}}
  alias DocuSign.Deserializer

  def decode(value) do
    value{{#vars}}{{^isPrimitiveType}}{{#baseType}}
    |> Deserializer.deserialize(
      {{#atom}}{{&baseName}}{{/atom}},
      {{#isArray}}:list, DocuSign.Model.{{{items.baseType}}}{{/isArray}}{{#isMap}}:map, DocuSign.Model.{{{items.baseType}}}{{/isMap}}{{#isDate}}:date, nil{{/isDate}}{{#isDateTime}}:datetime, nil{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{^isMap}}{{^isArray}}:struct, DocuSign.Model.{{baseType}}{{/isArray}}{{/isMap}}{{/isDateTime}}{{/isDate}}
    ){{/baseType}}{{/isPrimitiveType}}{{/vars}}
    |> then(&struct(__MODULE__, &1))
  end
{{/hasComplexVars}}
{{^hasComplexVars}}
  def decode(value) do
    struct(__MODULE__, value)
  end
{{/hasComplexVars}}
end

{{/model}}{{/models}}
