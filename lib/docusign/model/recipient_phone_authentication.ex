# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Model.RecipientPhoneAuthentication do
  @moduledoc """
  A complex type that contains the elements:  * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice. * `senderProvidedNumbers`: A list of phone numbers that the recipient can use. * `recordVoicePrint`: Reserved for Docusign. * `validateRecipProvidedNumber`: Reserved for Docusign.
  """

  @derive Jason.Encoder
  defstruct [
    :recipMayProvideNumber,
    :recipMayProvideNumberMetadata,
    :recordVoicePrint,
    :recordVoicePrintMetadata,
    :senderProvidedNumbers,
    :senderProvidedNumbersMetadata,
    :validateRecipProvidedNumber,
    :validateRecipProvidedNumberMetadata
  ]

  @type t :: %__MODULE__{
          :recipMayProvideNumber => String.t() | nil,
          :recipMayProvideNumberMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :recordVoicePrint => String.t() | nil,
          :recordVoicePrintMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :senderProvidedNumbers => [String.t()] | nil,
          :senderProvidedNumbersMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :validateRecipProvidedNumber => String.t() | nil,
          :validateRecipProvidedNumberMetadata => DocuSign.Model.PropertyMetadata.t() | nil
        }

  alias DocuSign.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :recipMayProvideNumberMetadata,
      :struct,
      DocuSign.Model.PropertyMetadata
    )
    |> Deserializer.deserialize(
      :recordVoicePrintMetadata,
      :struct,
      DocuSign.Model.PropertyMetadata
    )
    |> Deserializer.deserialize(
      :senderProvidedNumbersMetadata,
      :struct,
      DocuSign.Model.PropertyMetadata
    )
    |> Deserializer.deserialize(
      :validateRecipProvidedNumberMetadata,
      :struct,
      DocuSign.Model.PropertyMetadata
    )
  end
end
