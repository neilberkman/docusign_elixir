# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.DocumentHtmlDefinition do
  @moduledoc """
  Holds the properties that define how to generate the responsive-formatted HTML for the document. See [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/) in the [eSignature concepts guide](/docs/esign-rest-api/esign101/concepts/).
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.DocumentHtmlDisplayAnchor

  defstruct [
    :displayAnchorPrefix,
    :displayAnchors,
    :displayOrder,
    :displayPageNumber,
    :documentGuid,
    :documentId,
    :headerLabel,
    :maxScreenWidth,
    :removeEmptyTags,
    :showMobileOptimizedToggle,
    :source
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :displayAnchorPrefix => String.t() | nil,
          :displayAnchors => [DocumentHtmlDisplayAnchor.t()] | nil,
          :displayOrder => String.t() | nil,
          :displayPageNumber => String.t() | nil,
          :documentGuid => String.t() | nil,
          :documentId => String.t() | nil,
          :headerLabel => String.t() | nil,
          :maxScreenWidth => String.t() | nil,
          :removeEmptyTags => String.t() | nil,
          :showMobileOptimizedToggle => String.t() | nil,
          :source => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :displayAnchors,
      :list,
      DocumentHtmlDisplayAnchor
    )
    |> then(&struct(__MODULE__, &1))
  end
end
