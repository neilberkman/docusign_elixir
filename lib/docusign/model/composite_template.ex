# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.CompositeTemplate do
  @moduledoc """
  This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.  [composite]: /docs/esign-rest-api/esign101/concepts/templates/composite/
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.Document
  alias DocuSign.Model.InlineTemplate
  alias DocuSign.Model.ServerTemplate

  defstruct [
    :compositeTemplateId,
    :document,
    :inlineTemplates,
    :pdfMetaDataTemplateSequence,
    :serverTemplates
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :compositeTemplateId => String.t() | nil,
          :document => Document.t() | nil,
          :inlineTemplates => [InlineTemplate.t()] | nil,
          :pdfMetaDataTemplateSequence => String.t() | nil,
          :serverTemplates => [ServerTemplate.t()] | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :document,
      :struct,
      Document
    )
    |> Deserializer.deserialize(
      :inlineTemplates,
      :list,
      InlineTemplate
    )
    |> Deserializer.deserialize(
      :serverTemplates,
      :list,
      ServerTemplate
    )
    |> then(&struct(__MODULE__, &1))
  end
end
