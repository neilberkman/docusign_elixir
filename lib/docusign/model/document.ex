# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.Document do
  @moduledoc """
  A document object.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.DocGenFormField
  alias DocuSign.Model.DocumentHtmlDefinition
  alias DocuSign.Model.EnvelopeRecipientTabs
  alias DocuSign.Model.MatchBox
  alias DocuSign.Model.NameValue

  defstruct [
    :applyAnchorTabs,
    :assignTabsToRecipientId,
    :authoritativeCopy,
    :display,
    :docGenDocumentStatus,
    :docGenFormFields,
    :documentBase64,
    :documentFields,
    :documentId,
    :documentTemplateId,
    :encryptedWithKeyManager,
    :fileExtension,
    :fileFormatHint,
    :htmlDefinition,
    :includeInDownload,
    :isDocGenDocument,
    :matchBoxes,
    :name,
    :order,
    :pages,
    :password,
    :pdfFormFieldOption,
    :remoteUrl,
    :signerMustAcknowledge,
    :signerMustAcknowledgeUseAccountDefault,
    :tabs,
    :templateLocked,
    :templateRequired,
    :transformPdfFields,
    :uri
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :applyAnchorTabs => String.t() | nil,
          :assignTabsToRecipientId => String.t() | nil,
          :authoritativeCopy => boolean() | nil,
          :display => String.t() | nil,
          :docGenDocumentStatus => String.t() | nil,
          :docGenFormFields => [DocGenFormField.t()] | nil,
          :documentBase64 => String.t() | nil,
          :documentFields => [NameValue.t()] | nil,
          :documentId => String.t() | nil,
          :documentTemplateId => String.t() | nil,
          :encryptedWithKeyManager => String.t() | nil,
          :fileExtension => String.t() | nil,
          :fileFormatHint => String.t() | nil,
          :htmlDefinition => DocumentHtmlDefinition.t() | nil,
          :includeInDownload => String.t() | nil,
          :isDocGenDocument => String.t() | nil,
          :matchBoxes => [MatchBox.t()] | nil,
          :name => String.t() | nil,
          :order => String.t() | nil,
          :pages => String.t() | nil,
          :password => String.t() | nil,
          :pdfFormFieldOption => String.t() | nil,
          :remoteUrl => String.t() | nil,
          :signerMustAcknowledge => String.t() | nil,
          :signerMustAcknowledgeUseAccountDefault => boolean() | nil,
          :tabs => EnvelopeRecipientTabs.t() | nil,
          :templateLocked => String.t() | nil,
          :templateRequired => String.t() | nil,
          :transformPdfFields => String.t() | nil,
          :uri => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :docGenFormFields,
      :list,
      DocGenFormField
    )
    |> Deserializer.deserialize(
      :documentFields,
      :list,
      NameValue
    )
    |> Deserializer.deserialize(
      :htmlDefinition,
      :struct,
      DocumentHtmlDefinition
    )
    |> Deserializer.deserialize(
      :matchBoxes,
      :list,
      MatchBox
    )
    |> Deserializer.deserialize(
      :tabs,
      :struct,
      EnvelopeRecipientTabs
    )
    |> then(&struct(__MODULE__, &1))
  end
end
