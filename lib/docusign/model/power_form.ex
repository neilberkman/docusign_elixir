# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Model.PowerForm do
  @moduledoc """
  Contains details about a PowerForm.
  """

  @derive [Poison.Encoder]
  defstruct [
    :createdBy,
    :createdDateTime,
    :emailBody,
    :emailSubject,
    :envelopes,
    :errorDetails,
    :instructions,
    :isActive,
    :lastUsed,
    :limitUseInterval,
    :limitUseIntervalEnabled,
    :limitUseIntervalUnits,
    :maxUseEnabled,
    :name,
    :powerFormId,
    :powerFormUrl,
    :recipients,
    :senderName,
    :senderUserId,
    :signingMode,
    :templateId,
    :templateName,
    :timesUsed,
    :uri,
    :usesRemaining
  ]

  @type t :: %__MODULE__{
          :createdBy => String.t() | nil,
          :createdDateTime => String.t() | nil,
          :emailBody => String.t() | nil,
          :emailSubject => String.t() | nil,
          :envelopes => [DocuSign.Model.Envelope.t()] | nil,
          :errorDetails => DocuSign.Model.ErrorDetails.t() | nil,
          :instructions => String.t() | nil,
          :isActive => String.t() | nil,
          :lastUsed => String.t() | nil,
          :limitUseInterval => String.t() | nil,
          :limitUseIntervalEnabled => String.t() | nil,
          :limitUseIntervalUnits => String.t() | nil,
          :maxUseEnabled => String.t() | nil,
          :name => String.t() | nil,
          :powerFormId => String.t() | nil,
          :powerFormUrl => String.t() | nil,
          :recipients => [DocuSign.Model.PowerFormRecipient.t()] | nil,
          :senderName => String.t() | nil,
          :senderUserId => String.t() | nil,
          :signingMode => String.t() | nil,
          :templateId => String.t() | nil,
          :templateName => String.t() | nil,
          :timesUsed => String.t() | nil,
          :uri => String.t() | nil,
          :usesRemaining => String.t() | nil
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.PowerForm do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:envelopes, :list, DocuSign.Model.Envelope, options)
    |> deserialize(:errorDetails, :struct, DocuSign.Model.ErrorDetails, options)
    |> deserialize(:recipients, :list, DocuSign.Model.PowerFormRecipient, options)
  end
end
