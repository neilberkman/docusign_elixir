# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.Recipients do
  @moduledoc """
  Specifies the envelope recipients.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.CarbonCopy
  alias DocuSign.Model.CertifiedDelivery
  alias DocuSign.Model.Editor
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.InPersonSigner
  alias DocuSign.Model.Intermediary
  alias DocuSign.Model.NotaryRecipient
  alias DocuSign.Model.Participant
  alias DocuSign.Model.SealSign
  alias DocuSign.Model.Signer
  alias DocuSign.Model.Witness

  @derive Jason.Encoder
  defstruct [
    :agents,
    :carbonCopies,
    :certifiedDeliveries,
    :currentRoutingOrder,
    :editors,
    :errorDetails,
    :inPersonSigners,
    :intermediaries,
    :notaries,
    :participants,
    :recipientCount,
    :seals,
    :signers,
    :witnesses
  ]

  @type t :: %__MODULE__{
          :agents => [DocuSign.Model.Agent.t()] | nil,
          :carbonCopies => [CarbonCopy.t()] | nil,
          :certifiedDeliveries => [CertifiedDelivery.t()] | nil,
          :currentRoutingOrder => String.t() | nil,
          :editors => [Editor.t()] | nil,
          :errorDetails => ErrorDetails.t() | nil,
          :inPersonSigners => [InPersonSigner.t()] | nil,
          :intermediaries => [Intermediary.t()] | nil,
          :notaries => [NotaryRecipient.t()] | nil,
          :participants => [Participant.t()] | nil,
          :recipientCount => String.t() | nil,
          :seals => [SealSign.t()] | nil,
          :signers => [Signer.t()] | nil,
          :witnesses => [Witness.t()] | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :agents,
      :list,
      DocuSign.Model.Agent
    )
    |> Deserializer.deserialize(
      :carbonCopies,
      :list,
      CarbonCopy
    )
    |> Deserializer.deserialize(
      :certifiedDeliveries,
      :list,
      CertifiedDelivery
    )
    |> Deserializer.deserialize(
      :editors,
      :list,
      Editor
    )
    |> Deserializer.deserialize(
      :errorDetails,
      :struct,
      ErrorDetails
    )
    |> Deserializer.deserialize(
      :inPersonSigners,
      :list,
      InPersonSigner
    )
    |> Deserializer.deserialize(
      :intermediaries,
      :list,
      Intermediary
    )
    |> Deserializer.deserialize(
      :notaries,
      :list,
      NotaryRecipient
    )
    |> Deserializer.deserialize(
      :participants,
      :list,
      Participant
    )
    |> Deserializer.deserialize(
      :seals,
      :list,
      SealSign
    )
    |> Deserializer.deserialize(
      :signers,
      :list,
      Signer
    )
    |> Deserializer.deserialize(
      :witnesses,
      :list,
      Witness
    )
  end
end
