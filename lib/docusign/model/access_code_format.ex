# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.AccessCodeFormat do
  @moduledoc """
  Object specifying the format of the string provided to a recipient in order to access an envelope.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.SettingsMetadata

  defstruct [
    :formatRequired,
    :formatRequiredMetadata,
    :letterRequired,
    :letterRequiredMetadata,
    :minimumLength,
    :minimumLengthMetadata,
    :numberRequired,
    :numberRequiredMetadata,
    :specialCharacterRequired,
    :specialCharacterRequiredMetadata
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :formatRequired => String.t() | nil,
          :formatRequiredMetadata => SettingsMetadata.t() | nil,
          :letterRequired => String.t() | nil,
          :letterRequiredMetadata => SettingsMetadata.t() | nil,
          :minimumLength => String.t() | nil,
          :minimumLengthMetadata => SettingsMetadata.t() | nil,
          :numberRequired => String.t() | nil,
          :numberRequiredMetadata => SettingsMetadata.t() | nil,
          :specialCharacterRequired => String.t() | nil,
          :specialCharacterRequiredMetadata => SettingsMetadata.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :formatRequiredMetadata,
      :struct,
      SettingsMetadata
    )
    |> Deserializer.deserialize(
      :letterRequiredMetadata,
      :struct,
      SettingsMetadata
    )
    |> Deserializer.deserialize(
      :minimumLengthMetadata,
      :struct,
      SettingsMetadata
    )
    |> Deserializer.deserialize(
      :numberRequiredMetadata,
      :struct,
      SettingsMetadata
    )
    |> Deserializer.deserialize(
      :specialCharacterRequiredMetadata,
      :struct,
      SettingsMetadata
    )
    |> then(&struct(__MODULE__, &1))
  end
end
