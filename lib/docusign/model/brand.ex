# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Model.Brand do
  @moduledoc """
  Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
  """

  @derive [Poison.Encoder]
  defstruct [
    :brandCompany,
    :brandId,
    :brandLanguages,
    :brandName,
    :colors,
    :defaultBrandLanguage,
    :emailContent,
    :errorDetails,
    :isOverridingCompanyName,
    :isSendingDefault,
    :isSigningDefault,
    :landingPages,
    :links,
    :logos,
    :resources
  ]

  @type t :: %__MODULE__{
          :brandCompany => String.t() | nil,
          :brandId => String.t() | nil,
          :brandLanguages => [String.t()] | nil,
          :brandName => String.t() | nil,
          :colors => [DocuSign.Model.NameValue.t()] | nil,
          :defaultBrandLanguage => String.t() | nil,
          :emailContent => [DocuSign.Model.BrandEmailContent.t()] | nil,
          :errorDetails => DocuSign.Model.ErrorDetails.t() | nil,
          :isOverridingCompanyName => boolean() | nil,
          :isSendingDefault => boolean() | nil,
          :isSigningDefault => boolean() | nil,
          :landingPages => [DocuSign.Model.NameValue.t()] | nil,
          :links => [DocuSign.Model.BrandLink.t()] | nil,
          :logos => DocuSign.Model.BrandLogos.t() | nil,
          :resources => DocuSign.Model.BrandResourceUrls.t() | nil
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.Brand do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:colors, :list, DocuSign.Model.NameValue, options)
    |> deserialize(:emailContent, :list, DocuSign.Model.BrandEmailContent, options)
    |> deserialize(:errorDetails, :struct, DocuSign.Model.ErrorDetails, options)
    |> deserialize(:landingPages, :list, DocuSign.Model.NameValue, options)
    |> deserialize(:links, :list, DocuSign.Model.BrandLink, options)
    |> deserialize(:logos, :struct, DocuSign.Model.BrandLogos, options)
    |> deserialize(:resources, :struct, DocuSign.Model.BrandResourceUrls, options)
  end
end
