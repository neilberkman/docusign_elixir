# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.Brand do
  @moduledoc """
  Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.BrandEmailContent
  alias DocuSign.Model.BrandLink
  alias DocuSign.Model.BrandLogos
  alias DocuSign.Model.BrandResourceUrls
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.NameValue

  defstruct [
    :brandCompany,
    :brandId,
    :brandLanguages,
    :brandName,
    :colors,
    :defaultBrandLanguage,
    :emailContent,
    :errorDetails,
    :isOrganizationBrand,
    :isOverridingCompanyName,
    :isSendingDefault,
    :isSigningDefault,
    :landingPages,
    :links,
    :logos,
    :organizationBrandLogo,
    :resources
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :brandCompany => String.t() | nil,
          :brandId => String.t() | nil,
          :brandLanguages => [String.t()] | nil,
          :brandName => String.t() | nil,
          :colors => [NameValue.t()] | nil,
          :defaultBrandLanguage => String.t() | nil,
          :emailContent => [BrandEmailContent.t()] | nil,
          :errorDetails => ErrorDetails.t() | nil,
          :isOrganizationBrand => String.t() | nil,
          :isOverridingCompanyName => boolean() | nil,
          :isSendingDefault => boolean() | nil,
          :isSigningDefault => boolean() | nil,
          :landingPages => [NameValue.t()] | nil,
          :links => [BrandLink.t()] | nil,
          :logos => BrandLogos.t() | nil,
          :organizationBrandLogo => String.t() | nil,
          :resources => BrandResourceUrls.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :colors,
      :list,
      NameValue
    )
    |> Deserializer.deserialize(
      :emailContent,
      :list,
      BrandEmailContent
    )
    |> Deserializer.deserialize(
      :errorDetails,
      :struct,
      ErrorDetails
    )
    |> Deserializer.deserialize(
      :landingPages,
      :list,
      NameValue
    )
    |> Deserializer.deserialize(
      :links,
      :list,
      BrandLink
    )
    |> Deserializer.deserialize(
      :logos,
      :struct,
      BrandLogos
    )
    |> Deserializer.deserialize(
      :resources,
      :struct,
      BrandResourceUrls
    )
    |> then(&struct(__MODULE__, &1))
  end
end
