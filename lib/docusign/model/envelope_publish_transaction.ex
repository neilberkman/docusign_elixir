# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.EnvelopePublishTransaction do
  @moduledoc """

  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.EnvelopePublishTransactionErrorRollup
  alias DocuSign.Model.UserInfo

  defstruct [
    :applyConnectSettings,
    :envelopeCount,
    :envelopeLevelErrorRollups,
    :envelopePublishTransactionId,
    :errorCount,
    :fileLevelErrors,
    :noActionRequiredEnvelopeCount,
    :processedEnvelopeCount,
    :processingStatus,
    :resultsUri,
    :submissionDate,
    :submittedByUserInfo,
    :submittedForPublishingEnvelopeCount
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :applyConnectSettings => String.t() | nil,
          :envelopeCount => String.t() | nil,
          :envelopeLevelErrorRollups => [EnvelopePublishTransactionErrorRollup.t()] | nil,
          :envelopePublishTransactionId => String.t() | nil,
          :errorCount => String.t() | nil,
          :fileLevelErrors => [String.t()] | nil,
          :noActionRequiredEnvelopeCount => String.t() | nil,
          :processedEnvelopeCount => String.t() | nil,
          :processingStatus => String.t() | nil,
          :resultsUri => String.t() | nil,
          :submissionDate => String.t() | nil,
          :submittedByUserInfo => UserInfo.t() | nil,
          :submittedForPublishingEnvelopeCount => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :envelopeLevelErrorRollups,
      :list,
      EnvelopePublishTransactionErrorRollup
    )
    |> Deserializer.deserialize(
      :submittedByUserInfo,
      :struct,
      UserInfo
    )
    |> then(&struct(__MODULE__, &1))
  end
end
