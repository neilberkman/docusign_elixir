# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.EventNotification do
  @moduledoc """
  Use this object to configure a [Docusign Connect webhook](/platform/webhooks/connect/).
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.ConnectEventData
  alias DocuSign.Model.EnvelopeEvent
  alias DocuSign.Model.RecipientEvent

  defstruct [
    :deliveryMode,
    :envelopeEvents,
    :eventData,
    :events,
    :includeCertificateOfCompletion,
    :includeCertificateWithSoap,
    :includeDocumentFields,
    :includeDocuments,
    :includeEnvelopeVoidReason,
    :includeHMAC,
    :includeOAuth,
    :includeSenderAccountAsCustomField,
    :includeTimeZone,
    :integratorManaged,
    :loggingEnabled,
    :recipientEvents,
    :requireAcknowledgment,
    :signMessageWithX509Cert,
    :soapNameSpace,
    :url,
    :useSoapInterface
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :deliveryMode => String.t() | nil,
          :envelopeEvents => [EnvelopeEvent.t()] | nil,
          :eventData => ConnectEventData.t() | nil,
          :events => [String.t()] | nil,
          :includeCertificateOfCompletion => String.t() | nil,
          :includeCertificateWithSoap => String.t() | nil,
          :includeDocumentFields => String.t() | nil,
          :includeDocuments => String.t() | nil,
          :includeEnvelopeVoidReason => String.t() | nil,
          :includeHMAC => String.t() | nil,
          :includeOAuth => String.t() | nil,
          :includeSenderAccountAsCustomField => String.t() | nil,
          :includeTimeZone => String.t() | nil,
          :integratorManaged => String.t() | nil,
          :loggingEnabled => String.t() | nil,
          :recipientEvents => [RecipientEvent.t()] | nil,
          :requireAcknowledgment => String.t() | nil,
          :signMessageWithX509Cert => String.t() | nil,
          :soapNameSpace => String.t() | nil,
          :url => String.t() | nil,
          :useSoapInterface => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :envelopeEvents,
      :list,
      EnvelopeEvent
    )
    |> Deserializer.deserialize(
      :eventData,
      :struct,
      ConnectEventData
    )
    |> Deserializer.deserialize(
      :recipientEvents,
      :list,
      RecipientEvent
    )
    |> then(&struct(__MODULE__, &1))
  end
end
