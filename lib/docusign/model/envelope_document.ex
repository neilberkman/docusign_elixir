# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Model.EnvelopeDocument do
  @moduledoc """
  This object contains details about the envelope document.
  """

  @derive [Poison.Encoder]
  defstruct [
    :addedRecipientIds,
    :attachmentTabId,
    :authoritativeCopy,
    :authoritativeCopyMetadata,
    :availableDocumentTypes,
    :containsPdfFormFields,
    :display,
    :displayMetadata,
    :docGenDocumentStatus,
    :docGenErrors,
    :docGenFormFields,
    :documentBase64,
    :documentFields,
    :documentId,
    :documentIdGuid,
    :errorDetails,
    :includeInDownload,
    :includeInDownloadMetadata,
    :isDocGenDocument,
    :name,
    :nameMetadata,
    :order,
    :pages,
    :signerMustAcknowledge,
    :signerMustAcknowledgeMetadata,
    :sizeBytes,
    :templateLocked,
    :templateRequired,
    :type,
    :uri
  ]

  @type t :: %__MODULE__{
          :addedRecipientIds => [String.t()] | nil,
          :attachmentTabId => String.t() | nil,
          :authoritativeCopy => String.t() | nil,
          :authoritativeCopyMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :availableDocumentTypes => [DocuSign.Model.SignatureType.t()] | nil,
          :containsPdfFormFields => String.t() | nil,
          :display => String.t() | nil,
          :displayMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :docGenDocumentStatus => String.t() | nil,
          :docGenErrors => [DocuSign.Model.DocGenSyntaxError.t()] | nil,
          :docGenFormFields => [DocuSign.Model.DocGenFormField.t()] | nil,
          :documentBase64 => String.t() | nil,
          :documentFields => [DocuSign.Model.NameValue.t()] | nil,
          :documentId => String.t() | nil,
          :documentIdGuid => String.t() | nil,
          :errorDetails => DocuSign.Model.ErrorDetails.t() | nil,
          :includeInDownload => String.t() | nil,
          :includeInDownloadMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :isDocGenDocument => String.t() | nil,
          :name => String.t() | nil,
          :nameMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :order => String.t() | nil,
          :pages => [DocuSign.Model.Page.t()] | nil,
          :signerMustAcknowledge => String.t() | nil,
          :signerMustAcknowledgeMetadata => DocuSign.Model.PropertyMetadata.t() | nil,
          :sizeBytes => String.t() | nil,
          :templateLocked => String.t() | nil,
          :templateRequired => String.t() | nil,
          :type => String.t() | nil,
          :uri => String.t() | nil
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.EnvelopeDocument do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:authoritativeCopyMetadata, :struct, DocuSign.Model.PropertyMetadata, options)
    |> deserialize(:availableDocumentTypes, :list, DocuSign.Model.SignatureType, options)
    |> deserialize(:displayMetadata, :struct, DocuSign.Model.PropertyMetadata, options)
    |> deserialize(:docGenErrors, :list, DocuSign.Model.DocGenSyntaxError, options)
    |> deserialize(:docGenFormFields, :list, DocuSign.Model.DocGenFormField, options)
    |> deserialize(:documentFields, :list, DocuSign.Model.NameValue, options)
    |> deserialize(:errorDetails, :struct, DocuSign.Model.ErrorDetails, options)
    |> deserialize(:includeInDownloadMetadata, :struct, DocuSign.Model.PropertyMetadata, options)
    |> deserialize(:nameMetadata, :struct, DocuSign.Model.PropertyMetadata, options)
    |> deserialize(:pages, :list, DocuSign.Model.Page, options)
    |> deserialize(
      :signerMustAcknowledgeMetadata,
      :struct,
      DocuSign.Model.PropertyMetadata,
      options
    )
  end
end
