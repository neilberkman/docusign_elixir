# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.EnvelopeDocument do
  @moduledoc """
  This object contains details about the envelope document.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.DocGenFormField
  alias DocuSign.Model.DocGenSyntaxError
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.NameValue
  alias DocuSign.Model.Page
  alias DocuSign.Model.PropertyMetadata
  alias DocuSign.Model.SignatureType

  @derive Jason.Encoder
  defstruct [
    :addedRecipientIds,
    :agreementType,
    :agreementTypeSource,
    :attachmentTabId,
    :authoritativeCopy,
    :authoritativeCopyMetadata,
    :availableDocumentTypes,
    :containsPdfFormFields,
    :display,
    :displayMetadata,
    :docGenDocumentStatus,
    :docGenErrors,
    :docGenFormFields,
    :documentBase64,
    :documentFields,
    :documentId,
    :documentIdGuid,
    :documentTemplateId,
    :errorDetails,
    :hasDigitalSignature,
    :includeInDownload,
    :includeInDownloadMetadata,
    :isAceGenDocument,
    :isDocGenDocument,
    :isExternallyAvailable,
    :isFlattened,
    :name,
    :nameMetadata,
    :order,
    :pages,
    :signerMustAcknowledge,
    :signerMustAcknowledgeMetadata,
    :sizeBytes,
    :templateLocked,
    :templateRequired,
    :type,
    :uri
  ]

  @type t :: %__MODULE__{
          :addedRecipientIds => [String.t()] | nil,
          :agreementType => String.t() | nil,
          :agreementTypeSource => String.t() | nil,
          :attachmentTabId => String.t() | nil,
          :authoritativeCopy => String.t() | nil,
          :authoritativeCopyMetadata => PropertyMetadata.t() | nil,
          :availableDocumentTypes => [SignatureType.t()] | nil,
          :containsPdfFormFields => String.t() | nil,
          :display => String.t() | nil,
          :displayMetadata => PropertyMetadata.t() | nil,
          :docGenDocumentStatus => String.t() | nil,
          :docGenErrors => [DocGenSyntaxError.t()] | nil,
          :docGenFormFields => [DocGenFormField.t()] | nil,
          :documentBase64 => String.t() | nil,
          :documentFields => [NameValue.t()] | nil,
          :documentId => String.t() | nil,
          :documentIdGuid => String.t() | nil,
          :documentTemplateId => String.t() | nil,
          :errorDetails => ErrorDetails.t() | nil,
          :hasDigitalSignature => String.t() | nil,
          :includeInDownload => String.t() | nil,
          :includeInDownloadMetadata => PropertyMetadata.t() | nil,
          :isAceGenDocument => String.t() | nil,
          :isDocGenDocument => String.t() | nil,
          :isExternallyAvailable => String.t() | nil,
          :isFlattened => String.t() | nil,
          :name => String.t() | nil,
          :nameMetadata => PropertyMetadata.t() | nil,
          :order => String.t() | nil,
          :pages => [Page.t()] | nil,
          :signerMustAcknowledge => String.t() | nil,
          :signerMustAcknowledgeMetadata => PropertyMetadata.t() | nil,
          :sizeBytes => String.t() | nil,
          :templateLocked => String.t() | nil,
          :templateRequired => String.t() | nil,
          :type => String.t() | nil,
          :uri => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :authoritativeCopyMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :availableDocumentTypes,
      :list,
      SignatureType
    )
    |> Deserializer.deserialize(
      :displayMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :docGenErrors,
      :list,
      DocGenSyntaxError
    )
    |> Deserializer.deserialize(
      :docGenFormFields,
      :list,
      DocGenFormField
    )
    |> Deserializer.deserialize(
      :documentFields,
      :list,
      NameValue
    )
    |> Deserializer.deserialize(
      :errorDetails,
      :struct,
      ErrorDetails
    )
    |> Deserializer.deserialize(
      :includeInDownloadMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :nameMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :pages,
      :list,
      Page
    )
    |> Deserializer.deserialize(
      :signerMustAcknowledgeMetadata,
      :struct,
      PropertyMetadata
    )
  end
end
