# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.Radio do
  @moduledoc """
  One of the selectable radio buttons in the `radios` property of a [`radioGroup`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/) tab. 
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.ConnectedObjectDetails
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.ExtensionData
  alias DocuSign.Model.PropertyMetadata

  defstruct [
    :anchorAllowWhiteSpaceInCharacters,
    :anchorAllowWhiteSpaceInCharactersMetadata,
    :anchorCaseSensitive,
    :anchorCaseSensitiveMetadata,
    :anchorHorizontalAlignment,
    :anchorHorizontalAlignmentMetadata,
    :anchorIgnoreIfNotPresent,
    :anchorIgnoreIfNotPresentMetadata,
    :anchorMatchWholeWord,
    :anchorMatchWholeWordMetadata,
    :anchorString,
    :anchorStringMetadata,
    :anchorTabProcessorVersion,
    :anchorTabProcessorVersionMetadata,
    :anchorUnits,
    :anchorUnitsMetadata,
    :anchorXOffset,
    :anchorXOffsetMetadata,
    :anchorYOffset,
    :anchorYOffsetMetadata,
    :bold,
    :boldMetadata,
    :caption,
    :captionMetadata,
    :connectedObjectDetails,
    :errorDetails,
    :extensionData,
    :font,
    :fontColor,
    :fontColorMetadata,
    :fontMetadata,
    :fontSize,
    :fontSizeMetadata,
    :italic,
    :italicMetadata,
    :locked,
    :lockedMetadata,
    :mergeFieldXml,
    :pageNumber,
    :pageNumberMetadata,
    :required,
    :requiredMetadata,
    :selected,
    :selectedMetadata,
    :status,
    :statusMetadata,
    :tabFullyQualifiedPath,
    :tabId,
    :tabIdMetadata,
    :tabOrder,
    :tabOrderMetadata,
    :underline,
    :underlineMetadata,
    :value,
    :valueMetadata,
    :xPosition,
    :xPositionMetadata,
    :yPosition,
    :yPositionMetadata
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :anchorAllowWhiteSpaceInCharacters => String.t() | nil,
          :anchorAllowWhiteSpaceInCharactersMetadata => PropertyMetadata.t() | nil,
          :anchorCaseSensitive => String.t() | nil,
          :anchorCaseSensitiveMetadata => PropertyMetadata.t() | nil,
          :anchorHorizontalAlignment => String.t() | nil,
          :anchorHorizontalAlignmentMetadata => PropertyMetadata.t() | nil,
          :anchorIgnoreIfNotPresent => String.t() | nil,
          :anchorIgnoreIfNotPresentMetadata => PropertyMetadata.t() | nil,
          :anchorMatchWholeWord => String.t() | nil,
          :anchorMatchWholeWordMetadata => PropertyMetadata.t() | nil,
          :anchorString => String.t() | nil,
          :anchorStringMetadata => PropertyMetadata.t() | nil,
          :anchorTabProcessorVersion => String.t() | nil,
          :anchorTabProcessorVersionMetadata => PropertyMetadata.t() | nil,
          :anchorUnits => String.t() | nil,
          :anchorUnitsMetadata => PropertyMetadata.t() | nil,
          :anchorXOffset => String.t() | nil,
          :anchorXOffsetMetadata => PropertyMetadata.t() | nil,
          :anchorYOffset => String.t() | nil,
          :anchorYOffsetMetadata => PropertyMetadata.t() | nil,
          :bold => String.t() | nil,
          :boldMetadata => PropertyMetadata.t() | nil,
          :caption => String.t() | nil,
          :captionMetadata => PropertyMetadata.t() | nil,
          :connectedObjectDetails => ConnectedObjectDetails.t() | nil,
          :errorDetails => ErrorDetails.t() | nil,
          :extensionData => ExtensionData.t() | nil,
          :font => String.t() | nil,
          :fontColor => String.t() | nil,
          :fontColorMetadata => PropertyMetadata.t() | nil,
          :fontMetadata => PropertyMetadata.t() | nil,
          :fontSize => String.t() | nil,
          :fontSizeMetadata => PropertyMetadata.t() | nil,
          :italic => String.t() | nil,
          :italicMetadata => PropertyMetadata.t() | nil,
          :locked => String.t() | nil,
          :lockedMetadata => PropertyMetadata.t() | nil,
          :mergeFieldXml => String.t() | nil,
          :pageNumber => String.t() | nil,
          :pageNumberMetadata => PropertyMetadata.t() | nil,
          :required => String.t() | nil,
          :requiredMetadata => PropertyMetadata.t() | nil,
          :selected => String.t() | nil,
          :selectedMetadata => PropertyMetadata.t() | nil,
          :status => String.t() | nil,
          :statusMetadata => PropertyMetadata.t() | nil,
          :tabFullyQualifiedPath => String.t() | nil,
          :tabId => String.t() | nil,
          :tabIdMetadata => PropertyMetadata.t() | nil,
          :tabOrder => String.t() | nil,
          :tabOrderMetadata => PropertyMetadata.t() | nil,
          :underline => String.t() | nil,
          :underlineMetadata => PropertyMetadata.t() | nil,
          :value => String.t() | nil,
          :valueMetadata => PropertyMetadata.t() | nil,
          :xPosition => String.t() | nil,
          :xPositionMetadata => PropertyMetadata.t() | nil,
          :yPosition => String.t() | nil,
          :yPositionMetadata => PropertyMetadata.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :anchorAllowWhiteSpaceInCharactersMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorCaseSensitiveMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorHorizontalAlignmentMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorIgnoreIfNotPresentMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorMatchWholeWordMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorStringMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorTabProcessorVersionMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorUnitsMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorXOffsetMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :anchorYOffsetMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :boldMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :captionMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :connectedObjectDetails,
      :struct,
      ConnectedObjectDetails
    )
    |> Deserializer.deserialize(
      :errorDetails,
      :struct,
      ErrorDetails
    )
    |> Deserializer.deserialize(
      :extensionData,
      :struct,
      ExtensionData
    )
    |> Deserializer.deserialize(
      :fontColorMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :fontMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :fontSizeMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :italicMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :lockedMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :pageNumberMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :requiredMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :selectedMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :statusMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :tabIdMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :tabOrderMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :underlineMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :valueMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :xPositionMetadata,
      :struct,
      PropertyMetadata
    )
    |> Deserializer.deserialize(
      :yPositionMetadata,
      :struct,
      PropertyMetadata
    )
    |> then(&struct(__MODULE__, &1))
  end
end
