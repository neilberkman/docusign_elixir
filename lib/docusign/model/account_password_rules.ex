# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.AccountPasswordRules do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :expirePassword,
    :expirePasswordDays,
    :expirePasswordDaysMetadata,
    :lockoutDurationMinutes,
    :lockoutDurationMinutesMetadata,
    :lockoutDurationType,
    :lockoutDurationTypeMetadata,
    :minimumPasswordAgeDays,
    :minimumPasswordAgeDaysMetadata,
    :minimumPasswordLength,
    :minimumPasswordLengthMetadata,
    :passwordIncludeDigit,
    :passwordIncludeDigitOrSpecialCharacter,
    :passwordIncludeLowerCase,
    :passwordIncludeSpecialCharacter,
    :passwordIncludeUpperCase,
    :passwordStrengthType,
    :passwordStrengthTypeMetadata,
    :questionsRequired,
    :questionsRequiredMetadata
  ]

  @type t :: %__MODULE__{
          :expirePassword => String.t(),
          :expirePasswordDays => String.t(),
          :expirePasswordDaysMetadata => AccountPasswordExpirePasswordDays,
          :lockoutDurationMinutes => String.t(),
          :lockoutDurationMinutesMetadata => AccountPasswordLockoutDurationMinutes,
          :lockoutDurationType => String.t(),
          :lockoutDurationTypeMetadata => AccountPasswordLockoutDurationType,
          :minimumPasswordAgeDays => String.t(),
          :minimumPasswordAgeDaysMetadata => AccountPasswordMinimumPasswordAgeDays,
          :minimumPasswordLength => String.t(),
          :minimumPasswordLengthMetadata => AccountMinimumPasswordLength,
          :passwordIncludeDigit => String.t(),
          :passwordIncludeDigitOrSpecialCharacter => String.t(),
          :passwordIncludeLowerCase => String.t(),
          :passwordIncludeSpecialCharacter => String.t(),
          :passwordIncludeUpperCase => String.t(),
          :passwordStrengthType => String.t(),
          :passwordStrengthTypeMetadata => AccountPasswordStrengthType,
          :questionsRequired => String.t(),
          :questionsRequiredMetadata => AccountPasswordQuestionsRequired
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.AccountPasswordRules do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(
      :expirePasswordDaysMetadata,
      :struct,
      DocuSign.Model.AccountPasswordExpirePasswordDays,
      options
    )
    |> deserialize(
      :lockoutDurationMinutesMetadata,
      :struct,
      DocuSign.Model.AccountPasswordLockoutDurationMinutes,
      options
    )
    |> deserialize(
      :lockoutDurationTypeMetadata,
      :struct,
      DocuSign.Model.AccountPasswordLockoutDurationType,
      options
    )
    |> deserialize(
      :minimumPasswordAgeDaysMetadata,
      :struct,
      DocuSign.Model.AccountPasswordMinimumPasswordAgeDays,
      options
    )
    |> deserialize(
      :minimumPasswordLengthMetadata,
      :struct,
      DocuSign.Model.AccountMinimumPasswordLength,
      options
    )
    |> deserialize(
      :passwordStrengthTypeMetadata,
      :struct,
      DocuSign.Model.AccountPasswordStrengthType,
      options
    )
    |> deserialize(
      :questionsRequiredMetadata,
      :struct,
      DocuSign.Model.AccountPasswordQuestionsRequired,
      options
    )
  end
end
