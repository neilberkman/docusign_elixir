# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Model.BillingPlan do
  @moduledoc """
  Contains information about a billing plan.
  """

  alias DocuSign.Deserializer
  alias DocuSign.Model.AppStoreProduct
  alias DocuSign.Model.CurrencyPlanPrice
  alias DocuSign.Model.FeatureSet
  alias DocuSign.Model.SeatDiscount

  defstruct [
    :appStoreProducts,
    :currencyPlanPrices,
    :enableSupport,
    :includedSeats,
    :otherDiscountPercent,
    :paymentCycle,
    :paymentMethod,
    :perSeatPrice,
    :planClassification,
    :planFeatureSets,
    :planId,
    :planName,
    :seatDiscounts,
    :supportIncidentFee,
    :supportPlanFee
  ]

  @doc false
  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(struct, opts) do
      struct
      |> Map.from_struct()
      |> Enum.reject(fn {_k, v} -> is_nil(v) end)
      |> Map.new()
      |> Jason.Encode.map(opts)
    end
  end

  @type t :: %__MODULE__{
          :appStoreProducts => [AppStoreProduct.t()] | nil,
          :currencyPlanPrices => [CurrencyPlanPrice.t()] | nil,
          :enableSupport => String.t() | nil,
          :includedSeats => String.t() | nil,
          :otherDiscountPercent => String.t() | nil,
          :paymentCycle => String.t() | nil,
          :paymentMethod => String.t() | nil,
          :perSeatPrice => String.t() | nil,
          :planClassification => String.t() | nil,
          :planFeatureSets => [FeatureSet.t()] | nil,
          :planId => String.t() | nil,
          :planName => String.t() | nil,
          :seatDiscounts => [SeatDiscount.t()] | nil,
          :supportIncidentFee => String.t() | nil,
          :supportPlanFee => String.t() | nil
        }

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :appStoreProducts,
      :list,
      AppStoreProduct
    )
    |> Deserializer.deserialize(
      :currencyPlanPrices,
      :list,
      CurrencyPlanPrice
    )
    |> Deserializer.deserialize(
      :planFeatureSets,
      :list,
      FeatureSet
    )
    |> Deserializer.deserialize(
      :seatDiscounts,
      :list,
      SeatDiscount
    )
    |> then(&struct(__MODULE__, &1))
  end
end
