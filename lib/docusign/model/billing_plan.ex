# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Model.BillingPlan do
  @moduledoc """
  Contains information about a billing plan.
  """

  @derive Jason.Encoder
  defstruct [
    :appStoreProducts,
    :currencyPlanPrices,
    :enableSupport,
    :includedSeats,
    :otherDiscountPercent,
    :paymentCycle,
    :paymentMethod,
    :perSeatPrice,
    :planClassification,
    :planFeatureSets,
    :planId,
    :planName,
    :seatDiscounts,
    :supportIncidentFee,
    :supportPlanFee
  ]

  @type t :: %__MODULE__{
          :appStoreProducts => [DocuSign.Model.AppStoreProduct.t()] | nil,
          :currencyPlanPrices => [DocuSign.Model.CurrencyPlanPrice.t()] | nil,
          :enableSupport => String.t() | nil,
          :includedSeats => String.t() | nil,
          :otherDiscountPercent => String.t() | nil,
          :paymentCycle => String.t() | nil,
          :paymentMethod => String.t() | nil,
          :perSeatPrice => String.t() | nil,
          :planClassification => String.t() | nil,
          :planFeatureSets => [DocuSign.Model.FeatureSet.t()] | nil,
          :planId => String.t() | nil,
          :planName => String.t() | nil,
          :seatDiscounts => [DocuSign.Model.SeatDiscount.t()] | nil,
          :supportIncidentFee => String.t() | nil,
          :supportPlanFee => String.t() | nil
        }

  alias DocuSign.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:appStoreProducts, :list, DocuSign.Model.AppStoreProduct)
    |> Deserializer.deserialize(:currencyPlanPrices, :list, DocuSign.Model.CurrencyPlanPrice)
    |> Deserializer.deserialize(:planFeatureSets, :list, DocuSign.Model.FeatureSet)
    |> Deserializer.deserialize(:seatDiscounts, :list, DocuSign.Model.SeatDiscount)
  end
end
