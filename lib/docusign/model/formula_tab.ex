# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.FormulaTab do
  @moduledoc """
  The value of a formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the formula tab calculates and displays the result.  The &#x60;formula&#x60; property of the tab contains the references to the underlying tabs. See [Calculated Fields][calculatedfields] in the DocuSign Support Center to learn more about formulas.  If a formula tab contains a &#x60;paymentDetails&#x60; property, the tab is considered a payment item. See [Requesting Payments Along with Signatures][paymentguide] in the DocuSign Support Center to learn more about payments.  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures 
  """

  @derive [Poison.Encoder]
  defstruct [
    :anchorCaseSensitive,
    :anchorHorizontalAlignment,
    :anchorIgnoreIfNotPresent,
    :anchorMatchWholeWord,
    :anchorString,
    :anchorUnits,
    :anchorXOffset,
    :anchorYOffset,
    :bold,
    :concealValueOnDocument,
    :conditionalParentLabel,
    :conditionalParentValue,
    :customTabId,
    :disableAutoSize,
    :documentId,
    :errorDetails,
    :font,
    :fontColor,
    :fontSize,
    :formula,
    :hidden,
    :isPaymentAmount,
    :italic,
    :locked,
    :maxLength,
    :mergeField,
    :name,
    :originalValue,
    :pageNumber,
    :paymentDetails,
    :recipientId,
    :requireAll,
    :required,
    :requireInitialOnSharedChange,
    :roundDecimalPlaces,
    :senderRequired,
    :shared,
    :status,
    :tabId,
    :tabLabel,
    :tabOrder,
    :templateLocked,
    :templateRequired,
    :underline,
    :validationMessage,
    :validationPattern,
    :value,
    :width,
    :xPosition,
    :yPosition
  ]

  @type t :: %__MODULE__{
          :anchorCaseSensitive => String.t(),
          :anchorHorizontalAlignment => String.t(),
          :anchorIgnoreIfNotPresent => String.t(),
          :anchorMatchWholeWord => String.t(),
          :anchorString => String.t(),
          :anchorUnits => String.t(),
          :anchorXOffset => String.t(),
          :anchorYOffset => String.t(),
          :bold => String.t(),
          :concealValueOnDocument => String.t(),
          :conditionalParentLabel => String.t(),
          :conditionalParentValue => String.t(),
          :customTabId => String.t(),
          :disableAutoSize => String.t(),
          :documentId => String.t(),
          :errorDetails => ErrorDetails,
          :font => String.t(),
          :fontColor => String.t(),
          :fontSize => String.t(),
          :formula => String.t(),
          :hidden => String.t(),
          :isPaymentAmount => String.t(),
          :italic => String.t(),
          :locked => String.t(),
          :maxLength => integer(),
          :mergeField => MergeField,
          :name => String.t(),
          :originalValue => String.t(),
          :pageNumber => String.t(),
          :paymentDetails => PaymentDetails,
          :recipientId => String.t(),
          :requireAll => String.t(),
          :required => String.t(),
          :requireInitialOnSharedChange => String.t(),
          :roundDecimalPlaces => String.t(),
          :senderRequired => String.t(),
          :shared => String.t(),
          :status => String.t(),
          :tabId => String.t(),
          :tabLabel => String.t(),
          :tabOrder => String.t(),
          :templateLocked => String.t(),
          :templateRequired => String.t(),
          :underline => String.t(),
          :validationMessage => String.t(),
          :validationPattern => String.t(),
          :value => String.t(),
          :width => integer(),
          :xPosition => String.t(),
          :yPosition => String.t()
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.FormulaTab do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:errorDetails, :struct, DocuSign.Model.ErrorDetails, options)
    |> deserialize(:mergeField, :struct, DocuSign.Model.MergeField, options)
    |> deserialize(:paymentDetails, :struct, DocuSign.Model.PaymentDetails, options)
  end
end
