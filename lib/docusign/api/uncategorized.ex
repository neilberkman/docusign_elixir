# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Uncategorized do
  @moduledoc """
  API calls for all endpoints tagged `Uncategorized`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :encoding (String.t): 

  ## Returns

  {:ok, %DocuSign.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec comments_get_comments_transcript(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def comments_get_comments_transcript(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      encoding: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/comments/transcript")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.EnvelopePublishTransactionList{}} on success
  {:error, info} on failure
  """
  @spec envelope_publish_get_envelope_publish_transaction_list(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.EnvelopePublishTransactionList.t()} | {:error, Tesla.Env.t()}
  def envelope_publish_get_envelope_publish_transaction_list(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/connect/envelopes/publish")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopePublishTransactionList{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - transaction_id (String.t): Specifies the Transaction ID from the AppStore.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.EnvelopePublishTransaction{}} on success
  {:error, info} on failure
  """
  @spec envelope_publish_get_envelope_publish_transaction_meta_data(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.EnvelopePublishTransaction.t()} | {:error, Tesla.Env.t()}
  def envelope_publish_get_envelope_publish_transaction_meta_data(
        connection,
        account_id,
        transaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/connect/envelopes/publish/#{transaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopePublishTransaction{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - transaction_id (String.t): Specifies the Transaction ID from the AppStore.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec envelope_publish_get_envelope_publish_transaction_results(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def envelope_publish_get_envelope_publish_transaction_results(
        connection,
        account_id,
        transaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/connect/envelopes/publish/#{transaction_id}/results_csv")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :envelope_publish_request (EnvelopePublishRequest): 

  ## Returns

  {:ok, %DocuSign.Model.EnvelopePublishTransaction{}} on success
  {:error, info} on failure
  """
  @spec envelope_publish_post_envelope_publish_transaction(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.EnvelopePublishTransaction.t()} | {:error, Tesla.Env.t()}
  def envelope_publish_post_envelope_publish_transaction(connection, account_id, opts \\ []) do
    optional_params = %{
      envelopePublishRequest: :body
    }

    %{}
    |> method(:post)
    |> url("/v2/accounts/#{account_id}/connect/envelopes/publish")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopePublishTransaction{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - organization_id (String.t): 
  - result_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec organization_exports_get_account_settings_export(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def organization_exports_get_account_settings_export(
        connection,
        organization_id,
        result_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2/organization_exports/#{organization_id}/account_settings/#{result_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - document_id (String.t): The ID of the document being accessed.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :document_html_definition (DocumentHtmlDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.DocumentHtmlDefinitions{}} on success
  {:error, info} on failure
  """
  @spec responsive_html_post_document_responsive_html_preview(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentHtmlDefinitions.t()} | {:error, Tesla.Env.t()}
  def responsive_html_post_document_responsive_html_preview(
        connection,
        account_id,
        document_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      documentHtmlDefinition: :body
    }

    %{}
    |> method(:post)
    |> url(
      "/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}/responsive_html_preview"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentHtmlDefinitions{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :document_html_definition (DocumentHtmlDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.DocumentHtmlDefinitions{}} on success
  {:error, info} on failure
  """
  @spec responsive_html_post_responsive_html_preview(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentHtmlDefinitions.t()} | {:error, Tesla.Env.t()}
  def responsive_html_post_responsive_html_preview(
        connection,
        account_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      documentHtmlDefinition: :body
    }

    %{}
    |> method(:post)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/responsive_html_preview")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentHtmlDefinitions{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - document_id (String.t): The ID of the document being accessed.
  - template_id (String.t): The ID of the template being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :document_html_definition (DocumentHtmlDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.DocumentHtmlDefinitions{}} on success
  {:error, info} on failure
  """
  @spec responsive_html_post_template_document_responsive_html_preview(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentHtmlDefinitions.t()} | {:error, Tesla.Env.t()}
  def responsive_html_post_template_document_responsive_html_preview(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      documentHtmlDefinition: :body
    }

    %{}
    |> method(:post)
    |> url(
      "/v2/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/responsive_html_preview"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentHtmlDefinitions{})
  end

  @doc """



  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - template_id (String.t): The ID of the template being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :document_html_definition (DocumentHtmlDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.DocumentHtmlDefinitions{}} on success
  {:error, info} on failure
  """
  @spec responsive_html_post_template_responsive_html_preview(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentHtmlDefinitions.t()} | {:error, Tesla.Env.t()}
  def responsive_html_post_template_responsive_html_preview(
        connection,
        account_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      documentHtmlDefinition: :body
    }

    %{}
    |> method(:post)
    |> url("/v2/accounts/#{account_id}/templates/#{template_id}/responsive_html_preview")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentHtmlDefinitions{})
  end
end
