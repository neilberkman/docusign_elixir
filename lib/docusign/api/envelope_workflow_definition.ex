# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule DocuSign.Api.EnvelopeWorkflowDefinition do
  @moduledoc """
  API calls for all endpoints tagged `EnvelopeWorkflowDefinition`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder


  @doc """
  Deletes an envelope's workflow definition.
  Deletes the specified envelope's workflow definition if it has one. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_delete_envelope_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_delete_envelope_workflow_definition(connection, account_id, envelope_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Deletes a template's workflow definition.
  Deletes the specified template's workflow definition if it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The ID of the template.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_delete_template_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_delete_template_workflow_definition(connection, account_id, template_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Gets an envelope's workflow definition.
  Returns an envelope's workflow definition if the envelope specified by `envelopeId` has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, DocuSign.Model.Workflow.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_get_envelope_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.Workflow.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_get_envelope_workflow_definition(connection, account_id, envelope_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.Workflow{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Gets template's workflow definition.
  Returns template's workflow definition if the template specified by `templateId` has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The ID of the template.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, DocuSign.Model.Workflow.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_get_template_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.Workflow.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_get_template_workflow_definition(connection, account_id, template_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.Workflow{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Updates an envelope's workflow definition.
  Updates the specified envelope's workflow definition if  it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
  - opts (KeywordList): [optional] Optional parameters
    - :body (Workflow): 
  ## Returns

  {:ok, DocuSign.Model.Workflow.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_put_envelope_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.Workflow.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_put_envelope_workflow_definition(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.Workflow{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Update a template's workflow definition.
  Updates the specified template's workflow definition if  it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The ID of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :body (Workflow): 
  ## Returns

  {:ok, DocuSign.Model.Workflow.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec envelope_workflow_definition_put_template_workflow_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.Workflow.t} | {:error, Tesla.Env.t}
  def envelope_workflow_definition_put_template_workflow_definition(connection, account_id, template_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.Workflow{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end
end
