# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.SigningGroupUsers do
  @moduledoc """
  API calls for all endpoints tagged `SigningGroupUsers`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes  one or more members from a signing group.
  Deletes  one or more members from the specified signing group. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - signing_group_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :signing_group_users (SigningGroupUsers): 

  ## Returns

  {:ok, %DocuSign.Model.SigningGroupUsers{}} on success
  {:error, info} on failure
  """
  @spec signing_groups_delete_signing_group_users(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.SigningGroupUsers.t()} | {:error, Tesla.Env.t()}
  def signing_groups_delete_signing_group_users(
        connection,
        account_id,
        signing_group_id,
        opts \\ []
      ) do
    optional_params = %{
      SigningGroupUsers: :body
    }

    %{}
    |> method(:delete)
    |> url("/v2/accounts/#{account_id}/signing_groups/#{signing_group_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.SigningGroupUsers{})
  end

  @doc """
  Gets a list of members in a Signing Group.
  Retrieves the list of members in the specified Signing Group.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - signing_group_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.SigningGroupUsers{}} on success
  {:error, info} on failure
  """
  @spec signing_groups_get_signing_group_users(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.SigningGroupUsers.t()} | {:error, Tesla.Env.t()}
  def signing_groups_get_signing_group_users(
        connection,
        account_id,
        signing_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/signing_groups/#{signing_group_id}/users")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.SigningGroupUsers{})
  end

  @doc """
  Adds members to a signing group. 
  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - signing_group_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :signing_group_users (SigningGroupUsers): 

  ## Returns

  {:ok, %DocuSign.Model.SigningGroupUsers{}} on success
  {:error, info} on failure
  """
  @spec signing_groups_put_signing_group_users(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.SigningGroupUsers.t()} | {:error, Tesla.Env.t()}
  def signing_groups_put_signing_group_users(connection, account_id, signing_group_id, opts \\ []) do
    optional_params = %{
      SigningGroupUsers: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/signing_groups/#{signing_group_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.SigningGroupUsers{})
  end
end
