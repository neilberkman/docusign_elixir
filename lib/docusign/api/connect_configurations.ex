# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule DocuSign.Api.ConnectConfigurations do
  @moduledoc """
  API calls for all endpoints tagged `ConnectConfigurations`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder


  @doc """
  Deletes the specified Connect configuration.
  Deletes the specified DocuSign Connect configuration.  **Note:** Connect must be enabled for your account to use this function.   

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - connect_id (String.t): The ID of the custom Connect configuration being accessed.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_delete_connect_config(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_delete_connect_config(connection, account_id, connect_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/connect/#{connect_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Returns all users from the configured Connect service.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - connect_id (String.t): The ID of the custom Connect configuration being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :count (String.t): The maximum number of results to return.
    - :domain_users_only (String.t): 
    - :email_substring (String.t): Filters returned user records by full email address or a substring of email address.
    - :start_position (String.t): The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
    - :status (String.t): The status of the item.
    - :user_name_substring (String.t): Filters results based on a full or partial user name.  **Note:** When you enter a partial user name, you do not use a wildcard character.
  ## Returns

  {:ok, DocuSign.Model.IntegratedConnectUserInfoList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_get_connect_all_users(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.IntegratedConnectUserInfoList.t} | {:error, Tesla.Env.t}
  def connect_get_connect_all_users(connection, account_id, connect_id, opts \\ []) do
    optional_params = %{
      :count => :query,
      :domain_users_only => :query,
      :email_substring => :query,
      :start_position => :query,
      :status => :query,
      :user_name_substring => :query
    }
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/connect/#{connect_id}/all/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.IntegratedConnectUserInfoList{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Gets the details about a Connect configuration.
  Retrieves the information for the specified DocuSign Connect configuration.  **Note:** Connect must be enabled for your account to use this function. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - connect_id (String.t): The ID of the custom Connect configuration being accessed.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, DocuSign.Model.ConnectConfigResults.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_get_connect_config(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ConnectConfigResults.t} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_get_connect_config(connection, account_id, connect_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/connect/#{connect_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.ConnectConfigResults{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Get Connect configuration information.
  Retrieves all the DocuSign Custom Connect definitions for the specified account.  **Note:** Connect must be enabled for your account to use this function.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, DocuSign.Model.ConnectConfigResults.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_get_connect_configs(Tesla.Env.client, String.t, keyword()) :: {:ok, DocuSign.Model.ConnectConfigResults.t} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_get_connect_configs(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/connect")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.ConnectConfigResults{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Returns users from the configured Connect service.
  Returns users from the configured Connect service.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - connect_id (String.t): The ID of the custom Connect configuration being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :count (String.t): The maximum number of results to return.  Use `start_position` to specify the number of results to skip.  
    - :email_substring (String.t): Filters returned user records by full email address or a substring of email address.
    - :list_included_users (String.t): 
    - :start_position (String.t): The zero-based index of the result from which to start returning results.  Use with `count` to limit the number of results.  The default value is `0`. 
    - :status (String.t): Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled 
    - :user_name_substring (String.t): Filters results based on a full or partial user name.  **Note:** When you enter a partial user name, you do not use a wildcard character.
  ## Returns

  {:ok, DocuSign.Model.IntegratedUserInfoList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_get_connect_users(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.IntegratedUserInfoList.t} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_get_connect_users(connection, account_id, connect_id, opts \\ []) do
    optional_params = %{
      :count => :query,
      :email_substring => :query,
      :list_included_users => :query,
      :start_position => :query,
      :status => :query,
      :user_name_substring => :query
    }
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/connect/#{connect_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.IntegratedUserInfoList{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Creates a Connect configuration.
  Creates a custom Connect configuration for the specified account. Connect is a webhook service that provides updates when certain events occur in your eSignature workflows. You can use this endpoint to create: * Account-level Connect configurations to listen for events related to any envelopes you've sent * Recipient Connect configurations that are triggered when one or more of your account users receive an envelope  If you want to listen for events on only one envelope, use the [eventNotification](/docs/esign-rest-api/reference/envelopes/envelopes/create/#schema__envelopedefinition_eventnotification) object instead.  By default, this endpoint creates a disabled configuration. To enable the configuration immediately, set the body parameter `allowEnvelopePublish` to **true.**  **Note:** Connect must be enabled for your account to use this function.  ### Related topics  * For more information about Connect, see the [DocuSign Connect guide](/platform/webhooks/connect/).

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :body (ConnectCustomConfiguration): 
  ## Returns

  {:ok, DocuSign.Model.ConnectCustomConfiguration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_post_connect_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, DocuSign.Model.ConnectCustomConfiguration.t} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_post_connect_configuration(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/connect")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %DocuSign.Model.ConnectCustomConfiguration{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Updates a specified Connect configuration.
  Updates the specified DocuSign Connect configuration in your account. To enable the configuration, set the `allowEnvelopePublish` property to **true.**  **Note:** Connect must be enabled for your account to use this function.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :body (ConnectCustomConfiguration): 
  ## Returns

  {:ok, DocuSign.Model.ConnectCustomConfiguration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec connect_put_connect_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, DocuSign.Model.ConnectCustomConfiguration.t} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def connect_put_connect_configuration(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/connect")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.ConnectCustomConfiguration{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end
end
