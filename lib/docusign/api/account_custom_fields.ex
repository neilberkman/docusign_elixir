# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule DocuSign.Api.AccountCustomFields do
  @moduledoc """
  API calls for all endpoints tagged `AccountCustomFields`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder


  @doc """
  Deletes an account custom field.
  This method deletes an existing account custom field.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - custom_field_id (String.t): The ID of the custom field.
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec account_custom_fields_delete_account_custom_fields(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, DocuSign.Model.ErrorDetails.t} | {:error, Tesla.Env.t}
  def account_custom_fields_delete_account_custom_fields(connection, account_id, custom_field_id, opts \\ []) do
    optional_params = %{
      :apply_to_templates => :query
    }
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/custom_fields/#{custom_field_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Gets a list of custom fields.
  This method returns a list of the envelope and document custom fields associated with an account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, DocuSign.Model.AccountCustomFields.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec account_custom_fields_get_account_custom_fields(Tesla.Env.client, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.AccountCustomFields.t} | {:error, Tesla.Env.t}
  def account_custom_fields_get_account_custom_fields(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/custom_fields")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.AccountCustomFields{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Creates an account custom field.
  This method creates a custom field and makes it available for all new envelopes associated with an account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): (Optional) When **true,** the new custom field is applied to all of the templates on the account.
    - :body (CustomField): 
  ## Returns

  {:ok, DocuSign.Model.AccountCustomFields.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec account_custom_fields_post_account_custom_fields(Tesla.Env.client, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.AccountCustomFields.t} | {:error, Tesla.Env.t}
  def account_custom_fields_post_account_custom_fields(connection, account_id, opts \\ []) do
    optional_params = %{
      :apply_to_templates => :query,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/custom_fields")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %DocuSign.Model.AccountCustomFields{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Updates an account custom field.
  This method updates an existing account custom field.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - custom_field_id (String.t): The ID of the custom field.
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): 
    - :body (CustomField): 
  ## Returns

  {:ok, DocuSign.Model.AccountCustomFields.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec account_custom_fields_put_account_custom_fields(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, DocuSign.Model.ErrorDetails.t} | {:ok, DocuSign.Model.AccountCustomFields.t} | {:error, Tesla.Env.t}
  def account_custom_fields_put_account_custom_fields(connection, account_id, custom_field_id, opts \\ []) do
    optional_params = %{
      :apply_to_templates => :query,
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/custom_fields/#{custom_field_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %DocuSign.Model.AccountCustomFields{}},
      { 400, %DocuSign.Model.ErrorDetails{}}
    ])
  end
end
