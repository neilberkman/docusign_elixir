# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.AccountCustomFields do
  @moduledoc """
  API calls for all endpoints tagged `AccountCustomFields`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Delete an existing account custom field.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - custom_field_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_custom_fields_delete_account_custom_fields(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def account_custom_fields_delete_account_custom_fields(
        connection,
        account_id,
        custom_field_id,
        opts \\ []
      ) do
    optional_params = %{
      apply_to_templates: :query
    }

    %{}
    |> method(:delete)
    |> url("/v2/accounts/#{account_id}/custom_fields/#{custom_field_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a list of custom fields associated with the account.
  Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.AccountCustomFields{}} on success
  {:error, info} on failure
  """
  @spec account_custom_fields_get_account_custom_fields(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.AccountCustomFields.t()} | {:error, Tesla.Env.t()}
  def account_custom_fields_get_account_custom_fields(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/custom_fields")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.AccountCustomFields{})
  end

  @doc """
  Creates an acount custom field.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): 
    - :custom_field (CustomField): 

  ## Returns

  {:ok, %DocuSign.Model.AccountCustomFields{}} on success
  {:error, info} on failure
  """
  @spec account_custom_fields_post_account_custom_fields(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.AccountCustomFields.t()} | {:error, Tesla.Env.t()}
  def account_custom_fields_post_account_custom_fields(connection, account_id, opts \\ []) do
    optional_params = %{
      apply_to_templates: :query,
      customField: :body
    }

    %{}
    |> method(:post)
    |> url("/v2/accounts/#{account_id}/custom_fields")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.AccountCustomFields{})
  end

  @doc """
  Updates an existing account custom field.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - custom_field_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :apply_to_templates (String.t): 
    - :custom_field (CustomField): 

  ## Returns

  {:ok, %DocuSign.Model.AccountCustomFields{}} on success
  {:error, info} on failure
  """
  @spec account_custom_fields_put_account_custom_fields(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.AccountCustomFields.t()} | {:error, Tesla.Env.t()}
  def account_custom_fields_put_account_custom_fields(
        connection,
        account_id,
        custom_field_id,
        opts \\ []
      ) do
    optional_params = %{
      apply_to_templates: :query,
      customField: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/custom_fields/#{custom_field_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.AccountCustomFields{})
  end
end
