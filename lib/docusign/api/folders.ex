# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Folders do
  @moduledoc """
  API calls for all endpoints tagged `Folders`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets a list of the envelopes in the specified folder.
  Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - folder_id (String.t): The ID of the folder being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :from_date (String.t):  Only return items on or after this date. If no value is provided, the default search is the previous 30 days. 
    - :owner_email (String.t):  The email of the folder owner. 
    - :owner_name (String.t):  The name of the folder owner. 
    - :search_text (String.t):  The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject. 
    - :start_position (String.t): The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0.
    - :status (String.t): A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.  
    - :to_date (String.t): Only return items up to this date. If no value is provided, the default search is to the current date.

  ## Returns

  {:ok, %DocuSign.Model.FolderItemsResponse{}} on success
  {:error, info} on failure
  """
  @spec folders_get_folder_items(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.FolderItemsResponse.t()} | {:error, Tesla.Env.t()}
  def folders_get_folder_items(connection, account_id, folder_id, opts \\ []) do
    optional_params = %{
      from_date: :query,
      owner_email: :query,
      owner_name: :query,
      search_text: :query,
      start_position: :query,
      status: :query,
      to_date: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/folders/#{folder_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.FolderItemsResponse{})
  end

  @doc """
  Gets a list of the folders for the account.
  Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :include (String.t): Reserved for DocuSign. 
    - :start_position (String.t): Reserved for DocuSign. 
    - :template (String.t): Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned.
    - :user_filter (String.t): Reserved for DocuSign. 

  ## Returns

  {:ok, %DocuSign.Model.Folders{}} on success
  {:error, info} on failure
  """
  @spec folders_get_folders(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Folders.t()} | {:error, Tesla.Env.t()}
  def folders_get_folders(connection, account_id, opts \\ []) do
    optional_params = %{
      include: :query,
      start_position: :query,
      template: :query,
      user_filter: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/folders")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Folders{})
  end

  @doc """
  Moves an envelope from its current folder to the specified folder.
  Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - folder_id (String.t): The ID of the folder being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :folders_request (FoldersRequest): 

  ## Returns

  {:ok, %DocuSign.Model.Folders{}} on success
  {:error, info} on failure
  """
  @spec folders_put_folder_by_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Folders.t()} | {:error, Tesla.Env.t()}
  def folders_put_folder_by_id(connection, account_id, folder_id, opts \\ []) do
    optional_params = %{
      foldersRequest: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/folders/#{folder_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Folders{})
  end

  @doc """
  Gets a list of envelopes in folders matching the specified criteria.
  Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - search_folder_id (String.t): Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.
  - opts (KeywordList): [optional] Optional parameters
    - :all (String.t): Specifies that all envelopes that match the criteria are returned.
    - :count (String.t): Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100.
    - :from_date (String.t): Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days.
    - :include_recipients (String.t): When set to **true**, the recipient information is returned in the response.
    - :order (String.t): Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order.
    - :order_by (String.t): Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;.
    - :start_position (String.t): Specifies the the starting location in the result set of the items that are returned.
    - :to_date (String.t): Specifies the end of the date range to return.

  ## Returns

  {:ok, %DocuSign.Model.FolderItemResponse{}} on success
  {:error, info} on failure
  """
  @spec search_folders_get_search_folder_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.FolderItemResponse.t()} | {:error, Tesla.Env.t()}
  def search_folders_get_search_folder_contents(
        connection,
        account_id,
        search_folder_id,
        opts \\ []
      ) do
    optional_params = %{
      all: :query,
      count: :query,
      from_date: :query,
      include_recipients: :query,
      order: :query,
      order_by: :query,
      start_position: :query,
      to_date: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/search_folders/#{search_folder_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.FolderItemResponse{})
  end
end
