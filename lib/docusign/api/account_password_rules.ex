# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Api.AccountPasswordRules do
  @moduledoc """
  API calls for all endpoints tagged `AccountPasswordRules`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets the password rules for an account.
  This method retrieves the password rules for an account.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, DocuSign.Model.AccountPasswordRules.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec account_password_rules_get_account_password_rules(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, DocuSign.Model.ErrorDetails.t()}
          | {:ok, DocuSign.Model.AccountPasswordRules.t()}
          | {:error, Tesla.Env.t()}
  def account_password_rules_get_account_password_rules(connection, account_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2.1/accounts/#{account_id}/settings/password_rules")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %DocuSign.Model.AccountPasswordRules{}},
      {400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Updates the password rules for an account.
  This method updates the password rules for an account.  **Note:** To update the password rules for an account, you must be an account administrator.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `opts` (keyword): Optional parameters
    - `:body` (AccountPasswordRules):

  ### Returns

  - `{:ok, DocuSign.Model.AccountPasswordRules.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec account_password_rules_put_account_password_rules(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, DocuSign.Model.ErrorDetails.t()}
          | {:ok, DocuSign.Model.AccountPasswordRules.t()}
          | {:error, Tesla.Env.t()}
  def account_password_rules_put_account_password_rules(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2.1/accounts/#{account_id}/settings/password_rules")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %DocuSign.Model.AccountPasswordRules{}},
      {400, %DocuSign.Model.ErrorDetails{}}
    ])
  end

  @doc """
  Gets membership account password rules.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, DocuSign.Model.UserPasswordRules.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec password_rules_get_password_rules(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.UserPasswordRules.t()}
          | {:ok, DocuSign.Model.ErrorDetails.t()}
          | {:error, Tesla.Env.t()}
  def password_rules_get_password_rules(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2.1/current_user/password_rules")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %DocuSign.Model.UserPasswordRules{}},
      {400, %DocuSign.Model.ErrorDetails{}}
    ])
  end
end
