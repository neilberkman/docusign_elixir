# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Api.NotaryJournals do
  @moduledoc """
  API calls for all endpoints tagged `NotaryJournals`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets notary jurisdictions for a user.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:count` (String.t): The maximum number of results to return.
    - `:search_text` (String.t): Use this parameter to search for specific text.
    - `:start_position` (String.t): The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.

  ### Returns

  - `{:ok, DocuSign.Model.NotaryJournalList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec notary_journals_get_notary_journals(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.ErrorDetails.t()}
          | {:ok, DocuSign.Model.NotaryJournalList.t()}
          | {:error, Tesla.Env.t()}
  def notary_journals_get_notary_journals(connection, opts \\ []) do
    optional_params = %{
      :count => :query,
      :search_text => :query,
      :start_position => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2.1/current_user/notary/journals")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %DocuSign.Model.NotaryJournalList{}},
      {400, %DocuSign.Model.ErrorDetails{}}
    ])
  end
end
