# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.EnvelopeDocuments do
  @moduledoc """
  API calls for all endpoints tagged `EnvelopeDocuments`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes documents from a draft envelope.
  Deletes one or more documents from an existing draft envelope. &lt;p&gt;**Note**: Only relevant parts of an object are needed to delete a document.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :envelope_definition (EnvelopeDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.EnvelopeDocuments{}} on success
  {:error, info} on failure
  """
  @spec documents_delete_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.EnvelopeDocuments.t()} | {:error, Tesla.Env.t()}
  def documents_delete_documents(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      envelopeDefinition: :body
    }

    %{}
    |> method(:delete)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopeDocuments{})
  end

  @doc """
  Gets a document from an envelope.
  Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :---       | :--- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - document_id (String.t): The ID of the document being accessed.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :certificate (String.t): When set to **false**, the envelope signing certificate is removed from the download.
    - :encoding (String.t): 
    - :encrypt (String.t): When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API.
    - :language (String.t): Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es). 
    - :recipient_id (String.t): 
    - :show_changes (String.t): When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red. 
    - :watermark (String.t): When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark. 

  ## Returns

  {:ok, %DocuSign.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec documents_get_document(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def documents_get_document(connection, account_id, document_id, envelope_id, opts \\ []) do
    optional_params = %{
      certificate: :query,
      encoding: :query,
      encrypt: :query,
      language: :query,
      recipient_id: :query,
      show_changes: :query,
      watermark: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a list of envelope documents.
  Retrieves a list of documents associated with the specified envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.EnvelopeDocuments{}} on success
  {:error, info} on failure
  """
  @spec documents_get_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.EnvelopeDocuments.t()} | {:error, Tesla.Env.t()}
  def documents_get_documents(connection, account_id, envelope_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopeDocuments{})
  end

  @doc """
  Adds a document to an existing draft envelope.
  Adds a document to an existing draft envelope. &lt;p&gt;**Note**: When adding or modifying documents for an in-process envelope, DocuSign recommends locking the envelope prior to making any changes.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - document_id (String.t): The ID of the document being accessed.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :apply_document_fields (String.t): When **true**, document fields can be added or modified while adding or modifying envelope documents. 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec documents_put_document(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def documents_put_document(connection, account_id, document_id, envelope_id, opts \\ []) do
    optional_params = %{
      apply_document_fields: :query
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Adds one or more documents to an existing envelope document.
  Adds one or more documents to an existing envelope document. &lt;p&gt;**Note**: When adding or modifying documents for an in-process envelope, DocuSign recommends locking the envelope prior to making any changes.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - envelope_id (String.t): The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec 
  - opts (KeywordList): [optional] Optional parameters
    - :apply_document_fields (String.t): When **true**, document fields can be added or modified while adding or modifying envelope documents. 
    - :persist_tabs (String.t): 
    - :envelope_definition (EnvelopeDefinition): 

  ## Returns

  {:ok, %DocuSign.Model.EnvelopeDocuments{}} on success
  {:error, info} on failure
  """
  @spec documents_put_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.EnvelopeDocuments.t()} | {:error, Tesla.Env.t()}
  def documents_put_documents(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      apply_document_fields: :query,
      persist_tabs: :query,
      envelopeDefinition: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/envelopes/#{envelope_id}/documents")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopeDocuments{})
  end
end
