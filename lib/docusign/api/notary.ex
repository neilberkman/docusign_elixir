# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Api.Notary do
  @moduledoc """
  API calls for all endpoints tagged `Notary`.
  """

  import DocuSign.RequestBuilder

  alias DocuSign.Connection
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.Notary
  alias DocuSign.Model.NotaryResult

  @doc """
  Gets settings for a  notary user.
  Gets settings for a notary user. The current user must be a notary.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:include_jurisdictions` (String.t): When **true,** the response will include a `jurisdiction` property that contains an array of all supported jurisdictions for the current user.

  ### Returns

  - `{:ok, DocuSign.Model.NotaryResult.t}` on success
  - `{:error, Req.Response.t}` on failure
  """
  @spec notary_get_notary(DocuSign.Connection.t(), keyword()) ::
          {:ok, NotaryResult.t()}
          | {:error, Req.Response.t()}
  def notary_get_notary(connection, opts \\ []) do
    optional_params = %{
      :include_jurisdictions => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2.1/current_user/notary")
      |> add_optional_params(optional_params, opts)
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, NotaryResult},
      {400, ErrorDetails}
    ])
  end

  @doc """
  Registers the current user as a notary.
  Registers the current user as a notary.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (Notary): 

  ### Returns

  - `{:ok, DocuSign.Model.Notary.t}` on success
  - `{:error, Req.Response.t}` on failure
  """
  @spec notary_post_notary(DocuSign.Connection.t(), keyword()) ::
          {:ok, Notary.t()}
          | {:error, Req.Response.t()}
  def notary_post_notary(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2.1/current_user/notary")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Notary},
      {400, ErrorDetails}
    ])
  end

  @doc """
  Updates notary information for the current user.
  Updates notary information for the current user.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (Notary): 

  ### Returns

  - `{:ok, DocuSign.Model.Notary.t}` on success
  - `{:error, Req.Response.t}` on failure
  """
  @spec notary_put_notary(DocuSign.Connection.t(), keyword()) ::
          {:ok, Notary.t()}
          | {:error, Req.Response.t()}
  def notary_put_notary(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2.1/current_user/notary")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Notary},
      {400, ErrorDetails}
    ])
  end
end
