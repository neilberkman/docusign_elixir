# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DocuSign.Api.GroupBrands do
  @moduledoc """
  API calls for all endpoints tagged `GroupBrands`.
  """

  import DocuSign.RequestBuilder

  alias DocuSign.Connection
  alias DocuSign.Model.ErrorDetails
  alias DocuSign.Model.GroupBrands

  @doc """
  Deletes brand information from a group.
  This method deletes one or more brands from a group.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `group_id` (String.t): The ID of the group.
  - `opts` (keyword): Optional parameters
    - `:body` (BrandsRequest):

  ### Returns

  - `{:ok, DocuSign.Model.GroupBrands.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brands_delete_group_brands(DocuSign.Connection.t(), String.t(), String.t(), keyword()) ::
          {:ok, ErrorDetails.t()}
          | {:ok, GroupBrands.t()}
          | {:error, Tesla.Env.t()}
  def brands_delete_group_brands(connection, account_id, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
      |> add_optional_params(optional_params, opts)
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GroupBrands},
      {400, ErrorDetails}
    ])
  end

  @doc """
  Gets the brand information for a group.
  This method returns information about the brands associated with a group.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `group_id` (String.t): The ID of the group.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, DocuSign.Model.GroupBrands.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brands_get_group_brands(DocuSign.Connection.t(), String.t(), String.t(), keyword()) ::
          {:ok, ErrorDetails.t()}
          | {:ok, GroupBrands.t()}
          | {:error, Tesla.Env.t()}
  def brands_get_group_brands(connection, account_id, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GroupBrands},
      {400, ErrorDetails}
    ])
  end

  @doc """
  Adds an existing brand to a group.
  This method adds one or more existing brands to a group based on the `groupId`.

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `group_id` (String.t): The ID of the group being accessed.
  - `opts` (keyword): Optional parameters
    - `:body` (BrandsRequest):

  ### Returns

  - `{:ok, DocuSign.Model.GroupBrands.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brands_put_group_brands(DocuSign.Connection.t(), String.t(), String.t(), keyword()) ::
          {:ok, ErrorDetails.t()}
          | {:ok, GroupBrands.t()}
          | {:error, Tesla.Env.t()}
  def brands_put_group_brands(connection, account_id, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GroupBrands},
      {400, ErrorDetails}
    ])
  end
end
