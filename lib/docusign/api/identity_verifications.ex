# NOTE: This file is auto generated by OpenAPI Generator
# https://openapi-generator.tech
# Do not edit this file manually.

defmodule DocuSign.Api.IdentityVerifications do
  @moduledoc """
  API calls for all endpoints tagged `IdentityVerifications`.
  """

  import DocuSign.RequestBuilder

  alias DocuSign.Connection
  alias DocuSign.Model.AccountIdentityVerificationResponse
  alias DocuSign.Model.ErrorDetails

  @doc """
  Retrieves the Identity Verification workflows available to an account.
  This method returns a list of Identity Verification workflows that are available to an account.  **Note:** To use this method, you must either be an account administrator or a sender.  ### Related topics  - [How to require ID Verification (IDV) for a recipient](/docs/esign-rest-api/how-to/id-verification/)  

  ### Parameters

  - `connection` (DocuSign.Connection): Connection to server
  - `account_id` (String.t): The external account number (int) or account ID GUID.
  - `opts` (keyword): Optional parameters
    - `:identity_verification_workflow_status` (String.t): Filters the workflows returned according to status. Valid values:  - `active`: Only active workflows are returned. This is the default. - `deactivated`: Only deactivated workflows are returned. - `all`: All workflows are returned. 

  ### Returns

  - `{:ok, DocuSign.Model.AccountIdentityVerificationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec account_identity_verification_get_account_identity_verification(DocuSign.Connection.t(), String.t(), keyword()) ::
          {:ok, AccountIdentityVerificationResponse.t()}
          | {:error, Tesla.Env.t()}
  def account_identity_verification_get_account_identity_verification(connection, account_id, opts \\ []) do
    optional_params = %{
      :identity_verification_workflow_status => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2.1/accounts/#{account_id}/identity_verification")
      |> add_optional_params(optional_params, opts)
      |> Enum.to_list()

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, AccountIdentityVerificationResponse},
      {400, ErrorDetails}
    ])
  end
end
