# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Contacts do
  @moduledoc """
  API calls for all endpoints tagged `Contacts`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Replaces a particular contact associated with an account for the DocuSign service.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - contact_id (String.t): The unique identifier of a person in the contacts address book.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_delete_contact_with_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_delete_contact_with_id(connection, account_id, contact_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2/accounts/#{account_id}/contacts/#{contact_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Delete contacts associated with an account for the DocuSign service.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest): 

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_delete_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_delete_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      contactModRequest: :body
    }

    %{}
    |> method(:delete)
    |> url("/v2/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Gets a particular contact associated with the user&#39;s account.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - contact_id (String.t): The unique identifier of a person in the contacts address book.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ContactGetResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_get_contact_by_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactGetResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_get_contact_by_id(connection, account_id, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/accounts/#{account_id}/contacts/#{contact_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactGetResponse{})
  end

  @doc """
  Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest): 

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_post_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_post_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      contactModRequest: :body
    }

    %{}
    |> method(:post)
    |> url("/v2/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Replaces contacts associated with an account for the DocuSign service.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID Guid.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest): 

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_put_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_put_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      contactModRequest: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end
end
