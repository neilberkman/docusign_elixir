# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.RequestLogs do
  @moduledoc """
  API calls for all endpoints tagged `RequestLogs`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes the request log files.
  Deletes the request log files.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec api_request_log_delete_request_logs(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def api_request_log_delete_request_logs(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2/diagnostics/request_logs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a request logging log file.
  Retrieves information for a single log entry.  **Request** The &#x60;requestLogfId&#x60; property can be retrieved by getting the list of log entries. The Content-Transfer-Encoding header can be set to base64 to retrieve the API request/response as base 64 string. Otherwise the bytes of the request/response are returned.  **Response** If the Content-Transfer-Encoding header was set to base64, the log is returned as a base64 string.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - request_log_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec api_request_log_get_request_log(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def api_request_log_get_request_log(connection, request_log_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/diagnostics/request_logs/#{request_log_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the API request logging settings.
  Retrieves the current API request logging setting for the user and remaining log entries.  **Response** The response includes the current API request logging setting for the user, along with the maximum log entries and remaining log entries.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.RequestLogs{}} on success
  {:error, info} on failure
  """
  @spec api_request_log_get_request_log_settings(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.RequestLogs.t()} | {:error, Tesla.Env.t()}
  def api_request_log_get_request_log_settings(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2/diagnostics/settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.RequestLogs{})
  end

  @doc """
  Gets the API request logging log files.
  Retrieves a list of log entries as a JSON or xml object or as a zip file containing the entries.  If the Accept header is set to application/zip, the response is a zip file containing individual text files, each representing an API request.  If the Accept header is set to &#x60;application/json&#x60; or &#x60;application/xml&#x60;, the response returns list of log entries in either JSON or XML. An example JSON response body is shown below. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :encoding (String.t): 

  ## Returns

  {:ok, %DocuSign.Model.ApiRequestLogsResult{}} on success
  {:error, info} on failure
  """
  @spec api_request_log_get_request_logs(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.ApiRequestLogsResult.t()} | {:error, Tesla.Env.t()}
  def api_request_log_get_request_logs(connection, opts \\ []) do
    optional_params = %{
      encoding: :query
    }

    %{}
    |> method(:get)
    |> url("/v2/diagnostics/request_logs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ApiRequestLogsResult{})
  end

  @doc """
  Enables or disables API request logging for troubleshooting.
  Enables or disables API request logging for troubleshooting.  When enabled (&#x60;apiRequestLogging&#x60; is set to true), REST API requests and responses for the user are added to a log. A log can have up to 50 requests/responses and the current number of log entries can be determined by getting the settings. Logging is automatically disabled when the log limit of 50 is reached.  You can call [ML:GetRequestLog] or [ML:GetRequestLogs] to download the log files (individually or as a zip file). Call [ML:DeleteRequestLogs] to clear the log by deleting current entries.  Private information, such as passwords and integrator key information, which is normally located in the call header is omitted from the request/response log.  ###### Note: API request logging only captures requests from the authenticated user. Any call that does not authenticate the user and resolve a userId isn&#39;t logged. Meaning that login_information, NewAccounts, or other distributor-credential calls are not logged. 

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :request_logs (RequestLogs): 

  ## Returns

  {:ok, %DocuSign.Model.RequestLogs{}} on success
  {:error, info} on failure
  """
  @spec api_request_log_put_request_log_settings(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.RequestLogs.t()} | {:error, Tesla.Env.t()}
  def api_request_log_put_request_log_settings(connection, opts \\ []) do
    optional_params = %{
      RequestLogs: :body
    }

    %{}
    |> method(:put)
    |> url("/v2/diagnostics/settings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.RequestLogs{})
  end
end
